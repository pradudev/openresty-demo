worker_processes  1;

# The error.log and access.log in container is symlinked to StdOut
error_log  /usr/local/openresty/nginx/logs/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}
http {

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      '$request_time req_header:"$req_header" resp_header:"$resp_header"';

    access_log  /usr/local/openresty/nginx/logs/access.log  main;

    server {
      listen 8080;

      lua_need_request_body on;

      set $resp_body "";
      body_filter_by_lua '
          local resp_body = string.sub(ngx.arg[1], 1, 1000)
          ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
          if ngx.arg[2] then
              ngx.var.resp_body = ngx.ctx.buffered
          end
      ';

      set $req_header "";
      set $resp_header "";
      header_filter_by_lua ' 
        local h = ngx.req.get_headers()
        for k, v in pairs(h) do
            ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
        end
        local rh = ngx.resp.get_headers()
        for k, v in pairs(rh) do
            ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
        end
      ';

      location / {
          proxy_pass http://backend-app:3000;
      }
    }

    sendfile        on;

    keepalive_timeout  65;

    server_tokens off;

    server_names_hash_bucket_size 128;

    include /etc/nginx/conf.d/*.conf;
}